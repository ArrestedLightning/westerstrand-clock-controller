/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package clock.controller;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JSpinner;
import javax.swing.JSpinner.DateEditor;
import javax.swing.SpinnerDateModel;
import javax.swing.SwingUtilities;

/**
 *
 * @author joshualange
 */
public class TimeWindow extends javax.swing.JFrame implements DateTimeListener {

    MainWindow mw;

    public void setMw(MainWindow mw) {
        this.mw = mw;
    }

    private ClockProtocolCoder theClock;
    private Date currentClockDate;
    private Date currentOffset1Date;
    private Date currentOffset2Date;
    private Calendar currentClockCalendarDate;
    private Calendar currentOffset1CalendarDate;
    private Calendar currentOffset2CalendarDate;

    public ClockProtocolCoder getTheClockProtocolCoder() {
        return theClock;
    }

    public void setTheClockProtocolCoder(ClockProtocolCoder theClockProtocolCoder) {
        this.theClock = theClockProtocolCoder;
        if (this.theClock != null) {
            theClock.setTheDateListener(this);
            theClock.requestCurrentDateFromClock();
            theClock.requestCurrentOffsetFromClock(1);
            theClock.requestCurrentOffsetFromClock(2);
        }
    }

    /**
     * Creates new form TimeWindow
     */
    public TimeWindow() {
        initComponents();
        Timer seconds = new Timer();
        final SimpleDateFormat sdfTime = new SimpleDateFormat("MM/dd/yyyy hh:mm:ss a");
        final SimpleDateFormat sdfOffset = new SimpleDateFormat("hh:mm:ss a");

        DateEditor dateEditor1 = new JSpinner.DateEditor(clockOffset1Spinner, "h:mm a");
        DateEditor dateEditor2 = new JSpinner.DateEditor(clockOffset2Spinner, "h:mm a");
        clockOffset1Spinner.setEditor(dateEditor1);
        clockOffset2Spinner.setEditor(dateEditor2);
        TimerTask secondsTick = new TimerTask() {

            @Override
            public void run() {
                currentComputerTimeLabel.setText(sdfTime.format(new Date()));
                if (currentClockCalendarDate != null) {
                    currentClockCalendarDate.add(Calendar.SECOND, 1);
                    Date clockDate = currentClockCalendarDate.getTime();
                    currentClockTimeLabel.setText(sdfTime.format(clockDate));
                }
                if (currentOffset1CalendarDate != null) {

                    currentOffset1CalendarDate.add(Calendar.SECOND, 1);
                    Date clockDate = currentOffset1CalendarDate.getTime();
                    clockOffset1Label.setText(sdfOffset.format(clockDate));
                }
                if (currentOffset2CalendarDate != null) {

                    currentOffset2CalendarDate.add(Calendar.SECOND, 1);
                    Date clockDate = currentOffset2CalendarDate.getTime();
                    clockOffset2Label.setText(sdfOffset.format(clockDate));
                }
            }
        };

        seconds.scheduleAtFixedRate(secondsTick, 0, 1000);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        currentComputerTimeLabel = new javax.swing.JLabel();
        setMasterClockToCompTimeButton = new javax.swing.JButton();
        clockDateSpinner = new javax.swing.JSpinner();
        setMasterClockToSpecifiedTimeButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        currentClockTimeLabel = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        clockOffset1Spinner = new javax.swing.JSpinner();
        jLabel3 = new javax.swing.JLabel();
        clockOffset2Spinner = new javax.swing.JSpinner();
        clockOffset2Update = new javax.swing.JButton();
        refreshButton = new javax.swing.JButton();
        clockOffset1Label = new javax.swing.JLabel();
        clockOffset2Label = new javax.swing.JLabel();
        clockOffset1Update = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Clock Time Editor");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jTabbedPane1.setSize(new java.awt.Dimension(524, 250));

        currentComputerTimeLabel.setText("--");

        setMasterClockToCompTimeButton.setText("Set Master Clock Time To Computer Time");
        setMasterClockToCompTimeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setMasterClockToCompTimeButtonActionPerformed(evt);
            }
        });

        clockDateSpinner.setModel(new javax.swing.SpinnerDateModel(new java.util.Date(), new java.util.Date(946706400000L), null, java.util.Calendar.DAY_OF_WEEK));

        setMasterClockToSpecifiedTimeButton.setText("Set Master Clock Time To Specified Time");
        setMasterClockToSpecifiedTimeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setMasterClockToSpecifiedTimeButtonActionPerformed(evt);
            }
        });

        jLabel4.setText("Computer Time:");

        jLabel5.setText("Clock Time:");

        currentClockTimeLabel.setText("--");

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jSeparator1)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jLabel4)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(currentComputerTimeLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(clockDateSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 152, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(0, 0, Short.MAX_VALUE))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jLabel5)
                        .add(32, 32, 32)
                        .add(currentClockTimeLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .add(setMasterClockToSpecifiedTimeButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 541, Short.MAX_VALUE)
                    .add(setMasterClockToCompTimeButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 541, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(currentComputerTimeLabel)
                    .add(jLabel4))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel5)
                    .add(currentClockTimeLabel))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(setMasterClockToCompTimeButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jSeparator1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(clockDateSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(setMasterClockToSpecifiedTimeButton)
                .addContainerGap(91, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Clock Time", jPanel1);

        jLabel1.setText("<html> The clock system needs to know what time the clocks are currently reading<br> in order to function properly.  Under normal circumstances, it should not<br> be necessary to change this setting. In the event that it becomes<br> necessary, it can be changed below.</html>");

        jLabel2.setText("Clock System 1 Offset:");

        clockOffset1Spinner.setModel(new javax.swing.SpinnerDateModel(new java.util.Date(), null, null, java.util.Calendar.MINUTE));

        jLabel3.setText("Clock System 2 Offset:");

        clockOffset2Spinner.setModel(new javax.swing.SpinnerDateModel());

        clockOffset2Update.setText("Update");
        clockOffset2Update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clockOffset2UpdateActionPerformed(evt);
            }
        });

        refreshButton.setText("Refresh");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        clockOffset1Label.setText("--");

        clockOffset2Label.setText("--");

        clockOffset1Update.setText("Update");
        clockOffset1Update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clockOffset1UpdateActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jSeparator2)
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(0, 66, Short.MAX_VALUE))
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel2Layout.createSequentialGroup()
                                .add(jLabel3)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(clockOffset2Label, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel2Layout.createSequentialGroup()
                                .add(jLabel2)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(clockOffset1Label, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(clockOffset2Spinner)
                            .add(clockOffset1Spinner))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(clockOffset2Update)
                            .add(clockOffset1Update))))
                .addContainerGap())
            .add(jPanel2Layout.createSequentialGroup()
                .add(refreshButton)
                .add(0, 0, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 64, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jSeparator2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(clockOffset1Spinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(clockOffset1Label)
                    .add(clockOffset1Update))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel3)
                    .add(clockOffset2Spinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(clockOffset2Update)
                    .add(clockOffset2Label))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 76, Short.MAX_VALUE)
                .add(refreshButton))
        );

        jTabbedPane1.addTab("Clock Offset", jPanel2);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(jTabbedPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 574, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(jTabbedPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 303, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void setMasterClockToSpecifiedTimeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setMasterClockToSpecifiedTimeButtonActionPerformed
        theClock.setCurrentDateOnClock(((SpinnerDateModel) clockDateSpinner.getModel()).getDate());
        reRequestTimes();
    }//GEN-LAST:event_setMasterClockToSpecifiedTimeButtonActionPerformed

    private void setMasterClockToCompTimeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setMasterClockToCompTimeButtonActionPerformed
        theClock.setCurrentDateOnClock(new Date());
        reRequestTimes();
    }//GEN-LAST:event_setMasterClockToCompTimeButtonActionPerformed

    private void clockOffset2UpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clockOffset2UpdateActionPerformed
        theClock.setClockOffset(2, ((SpinnerDateModel) clockOffset2Spinner.getModel()).getDate());
        reRequestTimes();
    }//GEN-LAST:event_clockOffset2UpdateActionPerformed

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        reRequestTimes();
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void clockOffset1UpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clockOffset1UpdateActionPerformed
        theClock.setClockOffset(1, ((SpinnerDateModel) clockOffset1Spinner.getModel()).getDate());
        reRequestTimes();
    }//GEN-LAST:event_clockOffset1UpdateActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if (mw != null) {
            mw.setVisible(true);
        }
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TimeWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TimeWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TimeWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TimeWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new TimeWindow().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSpinner clockDateSpinner;
    private javax.swing.JLabel clockOffset1Label;
    private javax.swing.JSpinner clockOffset1Spinner;
    private javax.swing.JButton clockOffset1Update;
    private javax.swing.JLabel clockOffset2Label;
    private javax.swing.JSpinner clockOffset2Spinner;
    private javax.swing.JButton clockOffset2Update;
    private javax.swing.JLabel currentClockTimeLabel;
    private javax.swing.JLabel currentComputerTimeLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton refreshButton;
    private javax.swing.JButton setMasterClockToCompTimeButton;
    private javax.swing.JButton setMasterClockToSpecifiedTimeButton;
    // End of variables declaration//GEN-END:variables

    @Override
    public void clockDateReceived(Date theDate) {
        this.currentClockDate = theDate;
        this.currentClockCalendarDate = new GregorianCalendar();
        currentClockCalendarDate.setTime(theDate);
    }

    @Override
    public void clockOffsetReceived(int clockNum, Date theOffset) {
        switch (clockNum) {
            case 1:
                this.currentOffset1Date = theOffset;
                this.currentOffset1CalendarDate = new GregorianCalendar();
                currentOffset1CalendarDate.setTime(theOffset);
                break;
            case 2:
                this.currentOffset2Date = theOffset;
                this.currentOffset2CalendarDate = new GregorianCalendar();
                currentOffset2CalendarDate.setTime(theOffset);
                break;
            default:
                throw new AssertionError();
        }
    }

    private void reRequestTimes() {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    Thread.sleep(500);
                    //a bit of an ugly hack, but it should work
                    setTheClockProtocolCoder(theClock);
                } catch (InterruptedException ex) {
                    Logger.getLogger(TimeWindow.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }
}
