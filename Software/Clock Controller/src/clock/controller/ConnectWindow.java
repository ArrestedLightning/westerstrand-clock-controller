/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package clock.controller;

import java.util.prefs.Preferences;
import javax.swing.JOptionPane;

/**
 *
 * @author joshualange
 */
public class ConnectWindow extends javax.swing.JFrame {

        final String CONNECT_IP = "connect_ip";
        final String CONNECT_PORT = "connect_port";
    /**
     * Creates new form ConnectWindow
     */
    public ConnectWindow() {
        initComponents();
        this.getRootPane().setDefaultButton(connectButton);
        getPrefs();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        ipField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        portField = new javax.swing.JTextField();
        connectButton = new javax.swing.JButton();
        aboutButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Connect To Clock System");

        jLabel1.setText("IP Address or Hostname:");

        ipField.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                ipFieldCaretUpdate(evt);
            }
        });

        jLabel2.setText("Port:");

        portField.setText("51337");
        portField.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                portFieldCaretUpdate(evt);
            }
        });

        connectButton.setText("Connect");
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });

        aboutButton.setText("About");
        aboutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                    .add(layout.createSequentialGroup()
                        .add(aboutButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(connectButton))
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(jLabel1)
                        .add(ipField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 275, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(layout.createSequentialGroup()
                            .add(6, 6, 6)
                            .add(jLabel2))
                        .add(portField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 70, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(ipField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel2)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(portField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(connectButton)
                    .add(aboutButton))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ipFieldCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_ipFieldCaretUpdate
        checkFields();
    }//GEN-LAST:event_ipFieldCaretUpdate

    private void portFieldCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_portFieldCaretUpdate
        checkFields();
    }//GEN-LAST:event_portFieldCaretUpdate

    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectButtonActionPerformed
        doConnect();
    }//GEN-LAST:event_connectButtonActionPerformed

    private void aboutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutButtonActionPerformed
JOptionPane.showMessageDialog(null, "Version " + ClockControllerMain.VERSION + "\n(c) 2014-2016 Josh Lange",
        "About", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_aboutButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ConnectWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ConnectWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ConnectWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ConnectWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new ConnectWindow().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton aboutButton;
    private javax.swing.JButton connectButton;
    private javax.swing.JTextField ipField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField portField;
    // End of variables declaration//GEN-END:variables

    private void checkFields() {
        if (ipField.getText().equals("") || portField.getText().equals("")) {
            connectButton.setEnabled(false);
        } else {
            connectButton.setEnabled(true);
        }
    }

    private void doConnect() {
        ClockConnection connManager = new ClockNetworkConnection(ipField.getText(), Integer.parseInt(portField.getText()));
        boolean connStatus = connManager.connect();
        if (connStatus) {
            savePrefs();
            MainWindow mainW = new MainWindow();
            mainW.setConnection(connManager);
            this.setVisible(false);
            mainW.setVisible(true);

        } else {
            JOptionPane.showMessageDialog(null, "Could not connect to the clock.\n"
                    + "Check that the IP address and port are correct,\n make sure you are connected to the network, \n"
                    + "and try again.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void getPrefs() {
        //get the preferences for this class
        Preferences prefs = Preferences.userNodeForPackage(ConnectWindow.class);

        String defaultIP = "0.0.0.0";
        String defaultPort = "51337";
        String savedIP = prefs.get(CONNECT_IP, defaultIP);
        String savedPort = prefs.get(CONNECT_PORT, defaultPort);
        ipField.setText(savedIP);
        portField.setText(savedPort);
    }

    private void savePrefs() {
        //get the preferences for this class
        Preferences prefs = Preferences.userNodeForPackage(ConnectWindow.class);
        
        // Set the value of the preference
        prefs.put(CONNECT_IP, ipField.getText());
        prefs.put(CONNECT_PORT, portField.getText());
    }
}
